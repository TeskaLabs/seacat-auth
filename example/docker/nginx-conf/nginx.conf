#####################################
# MINIMAL HTTPS PROXY CONFIGURATION
#
# This configuration works best with a proper hostname (i.e. other than localhost)
# and requires an SSL certificate.
#
# Some OAuth redirects require full URL, i.e. one that includes the scheme, hostname
# and port (if not using default). This example config uses "https://my.domain.test" for those cases,
# so make sure to either rewrite it here to match your setup
# or add "127.0.0.1  my.domain.test" to your /etc/hosts.

# Define introspection cache
proxy_cache_path /data/nginx/my-app-oauth_cache  keys_zone=my_app_oauth_responses:1m max_size=2m;
proxy_cache_path /data/nginx/my-app-cookie_cache keys_zone=my_app_cookie_responses:1m max_size=2m;
proxy_cache_path /data/nginx/seacat-admin_cache  keys_zone=seacat_admin_oauth_responses:1m max_size=2m;

# Define upstreams
upstream my_app_api {
    server  localhost:8080;
}
upstream seacat_auth_api {
    server  localhost:8081;
}
upstream seacat_admin_api {
    server  localhost:8082;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name _;
    error_log /log/nginx.error.log;
    access_log /log/nginx.access.log;

    # Specify path to SSL certificate files
    ssl_certificate /etc/nginx/conf.d/cert.pem;
    ssl_certificate_key /etc/nginx/conf.d/key.pem;

    # Increase buffer size to fit larger ID tokens in Authorization headers
	proxy_buffer_size 128k;
	proxy_buffers 4 256k;
	proxy_busy_buffers_size 256k;

    # Unmatched paths redirect to the default location (Admin UI)
    location / {
        return 301 /seacat/;
    }


    #####################
    # SeaCat Auth WebUI
    location /auth {
        root  /webroot;
        index index.html;
    }

    # Public API
    location /auth/api/seacat_auth {
        rewrite ^/auth/api/seacat_auth/(.*) /$1 break;
        proxy_pass http://seacat_auth_api;
    }

    # OpenIDConnect
    location /auth/api/openidconnect {
        rewrite ^/auth/api/(.*) /$1 break;
        proxy_pass http://seacat_auth_api;
    }


    ######################
    # SeaCat Admin WebUI
    location /seacat {
        root  /webroot;
        index index.html;
    }

    # Admin API
    location /seacat/api/seacat_auth {
        rewrite ^/seacat/api/seacat_auth/(.*) /$1 break;
        proxy_pass http://seacat_admin_api;

        auth_request       /_seacat_admin_introspect;

        # Let the auth request rewrite the "Authorization" and the "Cookie"
        # headers to prevent auth token leaks
        auth_request_set   $authorization $upstream_http_authorization;
        proxy_set_header   Authorization $authorization;
        auth_request_set   $cookie $upstream_http_cookie;
        proxy_set_header   Cookie $cookie;

        # Error 401 will result in a redirect to OAuth Authorize endpoint
        # !!! Make sure to update the redirect_uri argument (especially the domain name) to match your Admin UI URL !!!
        error_page 401     /auth/api/openidconnect/authorize?client_id=asab-webui-auth&response_type=code&scope=openid%20profile&redirect_uri=https://my.domain.test/seacat/;
    }

    # Public API
    location /seacat/api/seacat_auth/public {
        rewrite ^/seacat/api/seacat_auth/(.*) /$1 break;
        proxy_pass http://seacat_auth_api;
    }

    # OpenIDConnect
    location /seacat/api/openidconnect {
        rewrite ^/seacat/api/(.*) /$1 break;
        proxy_pass http://seacat_auth_api;
    }

    # OAuth introspection
    location = /_seacat_admin_introspect {
        internal;
        proxy_method          POST;
        proxy_set_body        "$http_authorization";
        proxy_set_header      X-Request-Uri "$scheme://$host$request_uri";
        proxy_pass            http://seacat_auth_api/openidconnect/introspect/nginx?client_id=asab-webui-auth;
        proxy_ignore_headers  Cache-Control Expires Set-Cookie;

        # Cache successful introspection responses
        proxy_cache           seacat_admin_oauth_responses;
        proxy_cache_key       $http_authorization;
        proxy_cache_lock      on;
        proxy_cache_valid     200 30s;
    }


    ######################################
    # EXAMPLE: Cookie-protected location
	location /cookie_protected {
        rewrite     ^/cookie_protected(/(.*))? /$2 break;
        proxy_pass  http://my_app_api;

        auth_request /_my_app_cookie_introspection;

	    # Let the auth request rewrite the "Authorization" and the "Cookie"
        # headers to prevent auth token leaks
        auth_request_set      $authorization $upstream_http_authorization;
        proxy_set_header      Authorization $authorization;
        auth_request_set      $cookie $upstream_http_cookie;
        proxy_set_header      Cookie $cookie;

        # Extract the "X-State" header from auth request response and insert it in the error page Authorize URI
        # !!! Make sure to update the redirect_uri argument (especially the domain name) to match your App URL !!!
        auth_request_set      $x_state $upstream_http_x_state;
        error_page 401        /auth/api/openidconnect/authorize?response_type=code&scope=openid%20cookie%20profile&client_id=my-app-cookie&state=$x_state&redirect_uri=https://my.domain.test/my_app_cookie_entry;
	}

	# Introspection
	location = /_my_app_cookie_introspection {
		internal;
        proxy_method          POST;
        proxy_set_body        "$http_authorization";
        proxy_set_header      X-Request-Uri "$scheme://$host$request_uri";
        proxy_pass            http://seacat_auth_api/cookie/nginx?client_id=my-app-cookie;
        proxy_ignore_headers  Cache-Control Expires Set-Cookie;

        # Cache successful introspection responses
        proxy_cache           my_app_cookie_responses;
        proxy_cache_key       $http_cookie_SeaCatSCI;
        proxy_cache_lock      on;
        proxy_cache_valid     200 30s;
	}

    # Cookie entrypoint
    location /my_app_cookie_entry {
        proxy_method          POST;
        proxy_set_header      Content-Type "application/x-www-form-urlencoded";
        proxy_set_body        "client_id=my-app-cookie&grant_type=authorization_code&code=$arg_code&state=$arg_state";
        proxy_pass            http://seacat_auth_api/cookie/entry;
    }


    ######################################
	# EXAMPLE: OAuth2-protected location
	location /oauth_protected {
        rewrite     ^/oauth_protected(/(.*))? /$2 break;
        proxy_pass  http://my_app_api;

        auth_request /_my_app_oauth_introspection;

	    # Let the auth request rewrite the "Authorization" and the "Cookie"
        # headers to prevent auth token leaks
        auth_request_set      $authorization $upstream_http_authorization;
        proxy_set_header      Authorization $authorization;
        auth_request_set      $cookie $upstream_http_cookie;
        proxy_set_header      Cookie $cookie;

        # Extract the "X-State" header from auth request response and insert it in the error page Authorize URI
        # !!! Make sure to update the redirect_uri argument (especially the domain name) to match your App URL !!!
        auth_request_set      $x_state $upstream_http_x_state;
        error_page 401        /auth/api/openidconnect/authorize?response_type=code&scope=openid%20cookie%20profile&client_id=my-app-oauth&state=$x_state&redirect_uri=https://my.domain.test/cookie_protected;
	}

	location = /_my_app_oauth_introspection {
	    auth_request        /_oauth2_introspect;
	    internal;
        proxy_method          POST;
        proxy_set_body        $http_authorization;
        proxy_set_header      X-Request-Uri "$scheme://$host$request_uri";
        proxy_pass            http://seacat_auth_api/openidconnect/introspect/nginx?client_id=my-app-oauth;
        proxy_ignore_headers  Cache-Control Expires Set-Cookie;

        # Cache successful introspection responses
        proxy_cache           my_app_oauth_responses;
        proxy_cache_key       $http_authorization;
        proxy_cache_lock      on;
        proxy_cache_valid     200 30s;
	}
}


# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name _;
    return 301 https://$host$request_uri;
}
