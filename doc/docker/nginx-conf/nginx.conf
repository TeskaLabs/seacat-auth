server {
	listen 443 ssl;
	listen [::]:443 ssl;
	server_name SEACAT_BASE_URL;  # Replace SEACAT_BASE_URL with actual server URL
	error_log /log/nginx.error.log;
	access_log /log/nginx.access.log;

	# Specify path to SSL certificate files
	ssl_certificate /etc/nginx/conf.d/cert.pem;
	ssl_certificate_key /etc/nginx/conf.d/key.pem;

	location / {
	    # Redirect to default endpoint
		return 301 /auth;
	}

    #############################
    # SeaCat Auth WebUI section

    # WebUI
	location /auth {
		alias  /webui/seacat-auth-webui;
		index index.html;
	}

    # Public API
	location /auth/api/seacat_auth/public {
	    # SCA webUI uses only the public part of the API, no authentication required
		rewrite ^/auth/api/seacat_auth/(.*) /$1 break;
		proxy_pass http://seacat-auth-svc:8081;
	}

    # OpenIDConnect
	location /auth/api/openidconnect {
		rewrite ^/auth/api/(.*) /$1 break;
		proxy_pass http://seacat-auth-svc:8081;
	}


    ########################
    # SeaCat WebUI section
	location /seacat {
		alias  /webui/seacat-webui;
		index index.html;
	}

    # Seacat API
	location /seacat/api/seacat_auth {
        # The entire API is exposed here, so authentication is required
		auth_request /_oauth2_introspect;
		rewrite ^/seacat/api/seacat_auth/(.*) /$1 break;
		proxy_pass http://seacat-auth-svc:8082;
	}

    # OpenIDConnect
	location /seacat/api/openidconnect {
		rewrite ^/seacat/api/(.*) /$1 break;
		proxy_pass http://seacat-auth-svc:8081;
	}


    ###########################
    # Introspection endpoints
	location = /_cookie_introspect {
		internal;
		proxy_method          POST;
		proxy_set_body        "$http_authorization";
		proxy_pass            http://seacat-auth-svc:8081/cookie/nginx;
	}

	location = /_oauth2_introspect {
		internal;
		proxy_method          POST;
		proxy_set_body        "$http_authorization";
		proxy_set_header      X-Request-URI "$request_uri";
		proxy_pass            http://seacat-auth-svc:8081/openidconnect/introspect/nginx;
		proxy_ignore_headers  Cache-Control Expires Set-Cookie;
	}

	# 401 and 403 redirects to /openidconnect/authorize which will require authentication via Seacat Auth login page
	# Successful login redirects back to the original requested URI
	error_page 401 403 /auth/api/openidconnect/authorize?response_type=code&scope=openid%20cookie&client_id=signin&prompt=login&redirect_uri=$request_uri;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    # Replace SEACAT_BASE_URL with actual server URL
    server_name SEACAT_BASE_URL;
    return 301 https://SEACAT_BASE_URL$request_uri;
}
