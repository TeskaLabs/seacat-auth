#####################################
# MINIMAL HTTPS PROXY CONFIGURATION
#
# This configuration works best with a proper hostname (i.e. other than localhost)
# and requires an SSL certificate.
#


server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name -;
    error_log /log/nginx.error.log;
    access_log /log/nginx.access.log;

    # Specify path to SSL certificate files
    ssl_certificate /etc/nginx/conf.d/cert.pem;
    ssl_certificate_key /etc/nginx/conf.d/key.pem;


    #########################
    # Protected example app
	location = / {
	    auth_request        /_cookie_introspect;
	    auth_request_set    $authorization $upstream_http_authorization;
        proxy_set_header    Authorization $authorization;
	    proxy_pass          http://localhost:8080;
	}


    #############################
    # SeaCat Auth WebUI section

    # WebUI
    location /auth {
        root  /seacat-auth-webui;
        index index.html;
    }

    # Public API
    location /auth/api/seacat_auth {
        # SCA webUI uses only the public part of the API, no authentication required
        rewrite ^/auth/api/seacat_auth/(.*) /$1 break;
        proxy_pass http://localhost:8081;
    }

    # OpenIDConnect
    location /auth/api/openidconnect {
        rewrite ^/auth/api/(.*) /$1 break;
        proxy_pass http://localhost:8081;
    }


    ########################
    # SeaCat WebUI section
    location /seacat {
        root  /seacat-webui;
        index index.html;
    }

    # SeaCat API
    location /seacat/api/seacat_auth {
        # The entire API is exposed here, so authentication is required
        #auth_request /_oauth2_introspect;
        rewrite ^/seacat/api/seacat_auth/(.*) /$1 break;
        proxy_pass http://localhost:8082;
    }

    # SeaCat public API
    location /seacat/api/seacat_auth/public {
        rewrite ^/seacat/api/seacat_auth/(.*) /$1 break;
        proxy_pass http://localhost:8081;
    }

    # OpenIDConnect
    location /seacat/api/openidconnect {
        rewrite ^/seacat/api/(.*) /$1 break;
        proxy_pass http://localhost:8081;
    }


    # 401 and 403 redirects to /openidconnect/authorize which will require authentication via Seacat Auth login page
    # Successful login redirects back to the original requested URI
    error_page 401 403 /auth/api/openidconnect/authorize?response_type=code&scope=openid%20cookie&client_id=signin&prompt=login&redirect_uri=$request_uri;
}


# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name -;
    return 301 https://$host$request_uri;
}
