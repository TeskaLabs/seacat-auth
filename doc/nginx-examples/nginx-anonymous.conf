#####################################
# INTROSPECTION WITH ANONYMOUS ACCESS

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name _;
    error_log /log/nginx.error.log;
    access_log /log/nginx.access.log;

    # Specify path to SSL certificate files
    ssl_certificate /etc/nginx/conf.d/cert.pem;
    ssl_certificate_key /etc/nginx/conf.d/key.pem;

    # 401 redirects to /openidconnect/authorize which will request authentication via SeaCat Auth login page
    error_page 401 /auth/api/openidconnect/authorize?response_type=code&scope=openid%20cookie&client_id=signin&prompt=login&redirect_uri=$request_uri;
    # 403 redirects to SeaCat Auth home screen
    error_page 403 /auth?error=access_denied&what=$request_uri;

    location / {
        return 301 /seacat;
    }


    ######################################
    # EXAMPLE: Cookie-protected location
    #   with anonymous access support
	location /open_access {
	    auth_request        /_cookie_introspect_anonymous;

	    # Set Authorization header
	    auth_request_set    $authorization $upstream_http_authorization;
        proxy_set_header    Authorization $authorization;

        # Remove SeaCat Auth cookie
		auth_request_set    $cookie $upstream_http_cookie;
		proxy_set_header    Cookie $cookie;

		# Unauthenticated user receives a Set-Cookie from the auth request
		# Add the Set-Cookie header to response
		auth_request_set   $set_cookie $upstream_http_set_cookie;
		add_header	Set-Cookie $set_cookie;

        rewrite             ^/open_access/(.*) /$1 break;
	    proxy_pass          http://localhost:8080;
	}


    ###########################
    # Introspection endpoints
	location = /_cookie_introspect_anonymous {
		internal;
		proxy_method          POST;
		proxy_set_body        "$http_authorization";
		# Call the cookie introspection with a credential ID in the `anonymous` parameter
		# Anonymous sessions will have this ID in the `subject` field
		proxy_pass            http://localhost:8081/cookie/nginx?anonymous=mongodb:default:abc123def546;
	}
}


# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name _;
    return 301 https://$host$request_uri;
}
